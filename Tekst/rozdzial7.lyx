#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass aghdpl
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Interfejs użytkownika
\end_layout

\begin_layout Standard
W poprzednim rodziale opisano wszystkie działania, które podjęto w celu
 dokonania pomiaru przyśpieszenia i kąta obrotu układu.
 Dane przesłane do komputera nie mogą być jedynie wyświetlone po stronie
 komputera w postaci ciągu znaków, gdyż to praktycznie uniemożliwiałoby
 analizę otrzymywanych danych.
 Z tego względu konieczne jest odpowiednie przekształcenie otrzymanych danych
 w sposób, który umożliwi zobrazowanie zmierzonych przyspieszeń bądź obrotów.
 W tym celu przygotowano aplikację, której zadaniem jest odbiór i wyświetlenie
 w formie graficznej wyników.
 Wykorzystano do tego platformę .NET i język C#.
 Powodem wyboru tej technologii była względna prostota i mnogość klas i
 technik, które umożliwiały osiągnięcie postawionego celu na systemie Windows.
 
\end_layout

\begin_layout Section
Okno główne aplikacji
\end_layout

\begin_layout Standard
Okno główne zrealizowanego programu przedstawia się następująco:
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Tutaj wrzucić screena okna aplikacji i opisać poszczególne elementy okna
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Okno główne programu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Okno ustawień
\end_layout

\begin_layout Standard
Okno ustawień parametrów transmisji szeregowej przedstawiono na poniższej
 ilustracji.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Opcje programu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kluczową klasą, która służy do przechowywania parametrów połączenia dostępnych
 i wybranych jest klasa statyczna CommunicationParameters.
 Klasa ta zapamiętuje wybrane parametry transmisji danych i tablice danych
 wyświetlanych w listach rozwijanych.
 Nazwy portów szeregowych dostępnych w danym komputerze otrzymano korzystając
 z klasy SerialPort znajdującej się w przestrzeni nazw System.Port.IO, wykorzystyw
anej w aplikacji do komunikacji z mikroprocesorem.
 Aby rozpocząć pomiar konieczne jest jedynie wybranie odpowiedniej nazwy
 portu.
 Reszta parametrów domyślnie ustawiona jest na wartości, które wybrano już
 w momencie konfiguracji komunikacji poprzez interfejs UART w mikroprocesorze.
 W przypadku zmiany tych parametrów, konieczne jest wybranie odpowiednich
 wartości w oknie opcji.
 Kliknięcie przycisku Zapisz powoduje zapamiętanie wybranych parametrów
 i powrót do okna głownego.
\end_layout

\begin_layout Section
Odebranie danych z portu szeregowego
\end_layout

\begin_layout Standard
Pierwszym zadaniem, jakie było konieczne do zrealizowania wymagało odebrania
 danych pomiarowych otrzymanych z mikroprocesora za pośrednictwem portu
 szeregowego.
 Połączenie zrealizowano z wykorzystaniem klasy SerialPort, o której wspomniano
 już wcześniej.
 Klasa ta umożliwia kontrolę portów szeregowych komputera.
 Zapewnia ona komunikację synchroniczną, sterowaną zdarzeniami wspierające
 szereg typów kodowania: ASCII, UTF8, Unicode i UTF32.
\end_layout

\begin_layout Standard
W aplikacji za komunikację z portem szeregowym odpowiedzialna jest klasa
 COMPortManager.
 
\end_layout

\end_body
\end_document
